
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 13 23:03:03 CEST 2013
//----------------------------------------------------

package graphexpr;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 13 23:03:03 CEST 2013
  */
public class GraphExprParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GraphExprParser() {super();}

  /** Constructor which sets the default scanner. */
  public GraphExprParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraphExprParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\006\000\002\005\003\000" +
    "\002\005\007\000\002\007\007\000\002\004\005\000\002" +
    "\004\003\000\002\006\011\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\016\004\004\005\005\011\011\012\015\016" +
    "\013\021\010\001\002\000\014\002\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\020\ufff9\001\002\000\004\006\044\001\002\000" +
    "\010\002\ufffe\015\ufffe\020\ufffe\001\002\000\006\002\042" +
    "\015\041\001\002\000\014\002\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\020\ufffb\001\002\000\014\002\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\001\002\000\010\002\ufffd\015\ufffd\020" +
    "\ufffd\001\002\000\016\004\004\005\005\011\011\012\015" +
    "\016\013\021\010\001\002\000\006\002\uffff\015\uffff\001" +
    "\002\000\014\004\004\005\005\011\011\016\013\021\010" +
    "\001\002\000\004\014\017\001\002\000\004\010\021\001" +
    "\002\000\004\014\022\001\002\000\004\014\ufff3\001\002" +
    "\000\014\004\004\005\005\011\011\016\013\021\010\001" +
    "\002\000\004\013\024\001\002\000\010\002\ufff4\015\ufff4" +
    "\020\ufff4\001\002\000\004\020\026\001\002\000\004\012" +
    "\031\001\002\000\006\017\037\020\036\001\002\000\006" +
    "\017\ufff5\020\ufff5\001\002\000\004\010\021\001\002\000" +
    "\004\014\033\001\002\000\014\004\004\005\005\011\011" +
    "\016\013\021\010\001\002\000\004\013\035\001\002\000" +
    "\006\017\ufff7\020\ufff7\001\002\000\004\012\031\001\002" +
    "\000\014\002\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\001" +
    "\002\000\006\017\ufff6\020\ufff6\001\002\000\016\004\004" +
    "\005\005\011\011\012\015\016\013\021\010\001\002\000" +
    "\004\002\001\001\002\000\006\002\000\015\000\001\002" +
    "\000\004\010\045\001\002\000\004\007\046\001\002\000" +
    "\014\002\ufffa\013\ufffa\014\ufffa\015\ufffa\020\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\012\002\006\003\013\005\005\006\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\024\005\005\006\011\001\001" +
    "\000\002\001\001\000\004\005\015\001\001\000\002\001" +
    "\001\000\004\010\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\026\007\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\031\001\001\000\002\001\001\000\004\005\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\042" +
    "\005\005\006\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraphExprParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraphExprParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraphExprParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GraphExprParser$actions {
  private final GraphExprParser parser;

  /** Constructor */
  CUP$GraphExprParser$actions(GraphExprParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GraphExprParser$do_action(
    int                        CUP$GraphExprParser$act_num,
    java_cup.runtime.lr_parser CUP$GraphExprParser$parser,
    java.util.Stack            CUP$GraphExprParser$stack,
    int                        CUP$GraphExprParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraphExprParser$result;

      /* select the action based on the action number */
      switch (CUP$GraphExprParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // string ::= NAME 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("string",6, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // triple ::= LPAREN node COMMA string COMMA node RPAREN 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("triple",4, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-6)), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // double_list ::= double 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("double_list",2, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // double_list ::= double_list PLUS double 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("double_list",2, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // double ::= LPAREN string COMMA node RPAREN 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("double",5, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-4)), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // node ::= LCRO expr PLUS double_list RCRO 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-4)), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // node ::= NODE_FRESH 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // node ::= NODE LCHEV NAME RCHEV 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-3)), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // node ::= NULL 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // node ::= VAR 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("node",3, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= triple 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= node 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr_list ::= expr_list SEP expr 
            {
              Object RESULT =null;

              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-2)), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          return CUP$GraphExprParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-1)).value;
		RESULT = start_val;
              CUP$GraphExprParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.elementAt(CUP$GraphExprParser$top-1)), ((java_cup.runtime.Symbol)CUP$GraphExprParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraphExprParser$parser.done_parsing();
          return CUP$GraphExprParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

