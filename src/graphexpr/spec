// CUP specification for graph expressions

import java_cup.runtime.*;

import java.util.List;
import java.util.ArrayList;
import pregroup.SimpleType;

/* Terminals */
terminal    NODE_FRESH, NODE, LPAREN, RPAREN, COMMA, SEP, COLON, ALPHA, BETA;
terminal String IDENT, STR;
terminal Integer NODE_VAR, STMT_VAR, EXP_ODD, EXP_EVEN;

/* Non-terminals */
non terminal List<GraphExpr>   expr_list;
non terminal PatternExpr pattern;
non terminal GraphExpr expr;
non terminal NodeExpr node;
non terminal String string;
non terminal StmtExpr triple;
non terminal SimpleType producer_type;
non terminal SimpleType consumer_type;
non terminal Integer var;

/* The grammar */
expr_list ::= expr_list:l SEP expr:e
            {: l.add(e);
               RESULT = l; :}
            | expr:e
            {: List<GraphExpr> l = new ArrayList<GraphExpr>();
               l.add(e);
               RESULT = l; :}
            ;

expr ::= producer_type:t pattern:p
		{: RESULT = new ProducerExpr(t,p); :}
	   | consumer_type:t var:v
	    {: RESULT = new ConsumerExpr(t,v); :}
	    ;
	  
var ::= NODE_VAR:v
		{: RESULT = v; :}
	   | STMT_VAR:v
	    {: RESULT = v; :}
	    ;

pattern ::= node:n
       {: RESULT = n; :}
       | triple:t
       {: RESULT = t; :}
       ;

node ::= NODE_VAR:v
       {: RESULT = new NodeVarExpr(v); :}
       | NODE LPAREN string:n RPAREN
       {: RESULT = new NamedNodeExpr(n); :}
       | string:s
       {: RESULT = new LiteralExpr(s); :}
       | NODE_FRESH
       {: RESULT = new FreshExpr(); :}
       | ALPHA LPAREN triple:t RPAREN
       {: RESULT = new MorphExpr(false, t); :}
       | BETA LPAREN triple:t RPAREN
       {: RESULT = new MorphExpr(true, t); :}
       ;

triple ::= LPAREN node:n COMMA node:p COMMA node:o RPAREN
           {: RESULT = new TripleExpr(n,p,o); :}
           | STMT_VAR:v
           {: RESULT = new TripleVarExpr(v); :}
           ;

string ::= STR:s
           {: RESULT = s; :}
          ;

producer_type ::= IDENT:i COLON
		{: RESULT = new SimpleType(i,0); :}
		| IDENT:i LPAREN EXP_EVEN:e RPAREN COLON
		{: RESULT = new SimpleType(i,e); :}
		;
		
consumer_type ::= IDENT:i LPAREN EXP_ODD:e RPAREN COLON
		{: RESULT = new SimpleType(i,e); :}
		;



